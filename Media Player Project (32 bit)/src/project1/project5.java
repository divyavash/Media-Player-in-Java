
package project1;

import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import uk.co.caprica.vlcj.binding.LibVlc;
import uk.co.caprica.vlcj.binding.LibVlcConst;
import uk.co.caprica.vlcj.component.EmbeddedMediaPlayerComponent;
import uk.co.caprica.vlcj.player.MediaPlayer;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;
import uk.co.caprica.vlcj.runtime.RuntimeUtil;


public class project5 extends javax.swing.JFrame {

    EmbeddedMediaPlayer player;
    EmbeddedMediaPlayerComponent mediaPlayerComponent;
    MediaPlayer mp;
    JFileChooser fc;
    JList jl=new JList();
    String[] s=new String[30];
    String st[]=new String[30];
    String [] possibleValues = { "Add in list", "Delete from list" };
    Object x;
    int length,m;
    int bus=1;;
    int i=-1,j=-1,y=-1;
    boolean b=true;
    public project5() {
        initComponents();
        File f1=new File("C:\\Playlists");
        if(!f1.exists())
        {
            f1.mkdir();
        }
        File f2=new File("C:\\Deleted playlists");
        f2.mkdir();
        mediaPlayerComponent = new EmbeddedMediaPlayerComponent();
        player=mediaPlayerComponent.getMediaPlayer();
        mp=player;

        getContentPane().setBackground(new java.awt.Color(102, 0, 0));
        mediaPlayerComponent.setBounds(0, 0,832,481);

        playerscreen.add(mediaPlayerComponent);
      
        vol.setValue(player.getVolume());
        vol.setMinimum(LibVlcConst.MIN_VOLUME);
        vol.setMaximum(LibVlcConst.MAX_VOLUME);
      
        jll.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent lse) {
                if(b && !jll.isSelectionEmpty() && (jll.getSelectedValue()!=null))
                {
                    jl.setSelectedIndex(jll.getSelectedIndex());
                }
            }
        });
        jl.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent lse) {
                if(b && !jl.isSelectionEmpty() && (jl.getSelectedValue()!=null)){
                    new Thread(new Runnable() {

                    @Override
                    public void run() {
                    
                   player.playMedia(jl.getSelectedValue().toString());
                }
                }).start();
              try{
                  Thread.sleep(800);
              }
              catch(InterruptedException e){}
            
               length=(int)player.getLength();
                moveSlider();
                uptime();
               }
                    }
            
                });
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playerscreen = new javax.swing.JPanel();
        buttons = new javax.swing.JPanel();
        playbutton = new javax.swing.JButton();
        pause = new javax.swing.JButton();
        previous = new javax.swing.JButton();
        stop = new javax.swing.JButton();
        next = new javax.swing.JButton();
        mute = new javax.swing.JButton();
        vol = new javax.swing.JSlider();
        slider = new javax.swing.JSlider();
        timelabel = new javax.swing.JLabel();
        rewind = new javax.swing.JButton();
        forward = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jll = new javax.swing.JList();
        jMenuBar1 = new javax.swing.JMenuBar();
        media = new javax.swing.JMenu();
        openfile = new javax.swing.JMenuItem();
        exititem = new javax.swing.JMenuItem();
        playback = new javax.swing.JMenu();
        playitem = new javax.swing.JMenuItem();
        pauseitem = new javax.swing.JMenuItem();
        stopitem = new javax.swing.JMenuItem();
        forwarditem = new javax.swing.JMenuItem();
        backwarditem = new javax.swing.JMenuItem();
        nextitem = new javax.swing.JMenuItem();
        previousitem = new javax.swing.JMenuItem();
        togglemuteitem = new javax.swing.JMenuItem();
        playlist = new javax.swing.JMenu();
        openplaylist = new javax.swing.JMenuItem();
        update = new javax.swing.JMenuItem();
        newList = new javax.swing.JMenuItem();
        help = new javax.swing.JMenu();
        helpitem = new javax.swing.JMenuItem();
        about = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Media Player");
        setResizable(false);

        playerscreen.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 2, true));

        javax.swing.GroupLayout playerscreenLayout = new javax.swing.GroupLayout(playerscreen);
        playerscreen.setLayout(playerscreenLayout);
        playerscreenLayout.setHorizontalGroup(
            playerscreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 828, Short.MAX_VALUE)
        );
        playerscreenLayout.setVerticalGroup(
            playerscreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        buttons.setBackground(new java.awt.Color(102, 0, 0));

        playbutton.setBackground(new java.awt.Color(102, 0, 0));
        playbutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/playblue.png"))); // NOI18N
        playbutton.setToolTipText("play");
        playbutton.setBorder(null);
        playbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playbuttonActionPerformed(evt);
            }
        });

        pause.setBackground(new java.awt.Color(102, 0, 0));
        pause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/pauseblue.png"))); // NOI18N
        pause.setToolTipText("pause");
        pause.setBorder(null);
        pause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseActionPerformed(evt);
            }
        });

        previous.setBackground(new java.awt.Color(102, 0, 0));
        previous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/previousblue.png"))); // NOI18N
        previous.setToolTipText("previous");
        previous.setBorder(null);
        previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousActionPerformed(evt);
            }
        });

        stop.setBackground(new java.awt.Color(102, 0, 0));
        stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/stopblue.png"))); // NOI18N
        stop.setToolTipText("stop");
        stop.setBorder(null);
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        next.setBackground(new java.awt.Color(102, 0, 0));
        next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/nextblue.png"))); // NOI18N
        next.setToolTipText("next");
        next.setBorder(null);
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        mute.setBackground(new java.awt.Color(102, 0, 0));
        mute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/volumeblue.png"))); // NOI18N
        mute.setToolTipText("volume/mute");
        mute.setBorder(null);
        mute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                muteActionPerformed(evt);
            }
        });

        vol.setBackground(new java.awt.Color(102, 0, 0));
        vol.setToolTipText("volume");
        vol.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                volStateChanged(evt);
            }
        });

        slider.setBackground(new java.awt.Color(102, 0, 0));
        slider.setToolTipText("");
        slider.setValue(0);
        slider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderMouseReleased(evt);
            }
        });
        slider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                sliderMouseDragged(evt);
            }
        });

        timelabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        timelabel.setForeground(new java.awt.Color(255, 255, 255));
        timelabel.setToolTipText("time");

        rewind.setBackground(new java.awt.Color(102, 0, 0));
        rewind.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/rewindblue.png"))); // NOI18N
        rewind.setToolTipText("rewind");
        rewind.setBorder(null);
        rewind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rewindActionPerformed(evt);
            }
        });

        forward.setBackground(new java.awt.Color(102, 0, 0));
        forward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/forwardblue.png"))); // NOI18N
        forward.setToolTipText("forward");
        forward.setBorder(null);
        forward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonsLayout = new javax.swing.GroupLayout(buttons);
        buttons.setLayout(buttonsLayout);
        buttonsLayout.setHorizontalGroup(
            buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buttonsLayout.createSequentialGroup()
                        .addComponent(playbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pause, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rewind, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(previous, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(next, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(forward, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addComponent(mute, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(vol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(buttonsLayout.createSequentialGroup()
                        .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, 913, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(timelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        buttonsLayout.setVerticalGroup(
            buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buttonsLayout.createSequentialGroup()
                        .addComponent(timelabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(mute, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, buttonsLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(vol, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(playbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(buttonsLayout.createSequentialGroup()
                        .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(buttonsLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(previous, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rewind, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(forward, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(next, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(stop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(buttonsLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(pause, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        jll.setBackground(new java.awt.Color(102, 0, 0));
        jll.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Now Playing", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 1, 14), new java.awt.Color(153, 153, 255))); // NOI18N
        jll.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(jll);

        media.setText("Media");
        media.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediaActionPerformed(evt);
            }
        });

        openfile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, java.awt.event.InputEvent.ALT_MASK));
        openfile.setText("Open File");
        openfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openfileActionPerformed(evt);
            }
        });
        media.add(openfile);

        exititem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exititem.setText("Exit");
        exititem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exititemActionPerformed(evt);
            }
        });
        media.add(exititem);

        jMenuBar1.add(media);

        playback.setText("Playback");

        playitem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, 0));
        playitem.setText("Play");
        playitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playitemActionPerformed(evt);
            }
        });
        playback.add(playitem);

        pauseitem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SPACE, 0));
        pauseitem.setText("Pause");
        pauseitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseitemActionPerformed(evt);
            }
        });
        playback.add(pauseitem);

        stopitem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, 0));
        stopitem.setText("Stop");
        stopitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopitemActionPerformed(evt);
            }
        });
        playback.add(stopitem);

        forwarditem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, 0));
        forwarditem.setText("Jump Forward");
        forwarditem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwarditemActionPerformed(evt);
            }
        });
        playback.add(forwarditem);

        backwarditem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, 0));
        backwarditem.setText("Jump Backward");
        backwarditem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backwarditemActionPerformed(evt);
            }
        });
        playback.add(backwarditem);

        nextitem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_UP, 0));
        nextitem.setText("Play Next song");
        nextitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextitemActionPerformed(evt);
            }
        });
        playback.add(nextitem);

        previousitem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DOWN, 0));
        previousitem.setText("Play Previous song");
        previousitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousitemActionPerformed(evt);
            }
        });
        playback.add(previousitem);

        togglemuteitem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, 0));
        togglemuteitem.setText("Toggle mute");
        togglemuteitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                togglemuteitemActionPerformed(evt);
            }
        });
        playback.add(togglemuteitem);

        jMenuBar1.add(playback);

        playlist.setText("Playlist");

        openplaylist.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_MASK));
        openplaylist.setText("Open playlist");
        openplaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openplaylistActionPerformed(evt);
            }
        });
        playlist.add(openplaylist);

        update.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.ALT_MASK));
        update.setText("Update playlists");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        playlist.add(update);

        newList.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        newList.setText("Create new list");
        newList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newListActionPerformed(evt);
            }
        });
        playlist.add(newList);

        jMenuBar1.add(playlist);

        help.setText("Help");

        helpitem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        helpitem.setText("Help");
        helpitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpitemActionPerformed(evt);
            }
        });
        help.add(helpitem);

        about.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.ALT_MASK));
        about.setText("About");
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });
        help.add(about);

        jMenuBar1.add(help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playerscreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(buttons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 492, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(playerscreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//
    public void updateFile(String ss)
{
    
    JFileChooser jc3=new JFileChooser();
    jc3.setDialogTitle("Select songs to be added to playlist"); 
    FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "Media Files", "wav","wmv","wma", "mp3" ,"aac","mkv" ,"mp4", "vob" ,"mpeg", "avi", "amr", "flv"
            , "jpg","png","psd","tga","thm","tif","gif","ai","eps","ps");
          jc3.setFileFilter(filter);
    if(jc3.showOpenDialog(null)==JFileChooser.APPROVE_OPTION)
    {
      s[++j]= jc3.getSelectedFile().getPath().toString();
      st[j]="";
      int g,h;
      for ( g = s[j].length()-1; g >0 ; g--) 
      { 
        if(((int)s[j].charAt(g))==92)  
        {
            g++;
            break;
        }
     }
     for (h = g; h < s[j].length(); h++) 
        st[j]+=s[j].charAt(h);
     i=j;
      FileWriter fw=null;
      BufferedWriter bw=null;
    try{
        fw=new FileWriter(ss,true);         //Opening file in append mode
        bw=new BufferedWriter(fw);
                bw.append(s[j]);
                bw.append("\n");
     bw.close();   
    }
    catch(Exception e )
    {
        e.printStackTrace();
    }
    }
}
    
 public void deleteFile(int s1, String s2)
{
    player.stop();
    FileReader fr=null;
    BufferedReader br=null;
    FileWriter fw=null;
    BufferedWriter bw=null;
    String con1="";
    int z=-1;
    try
    {
        fr=new FileReader(s2);
        br=new BufferedReader(fr);
        fw=new FileWriter("C:\\Deleted playlists\\temp.txt");
        bw=new BufferedWriter(fw);
        while((con1=br.readLine())!=null)
        {
            z++;
            if(z!=s1) 
            {
                fw.write(con1);
                fw.write("\n"); 
            }
                 
        }
            br.close();
            bw.close();
            fr.close();
            fw.close();
  
            
        fr=new FileReader("C:\\Deleted playlists\\temp.txt");
        br=new BufferedReader(fr);
        fw=new FileWriter(s2);
        bw=new BufferedWriter(fw);
        while((con1=br.readLine())!=null)
        {
            fw.write(con1);
            fw.write("\n");
            s[++y]=con1;
           st[y]="";
           int g,h;
           for ( g = s[y].length()-1; g >0 ; g--) 
           { 
                if(((int)s[y].charAt(g))==92)  
                {
                    g++;
                    break;
                }
           }
           for (h = g; h < s[y].length(); h++) 
               st[y]+=s[y].charAt(h); 
        }
        i=y;
            br.close();
            bw.close();
            fr.close();
            fw.close();
        for (int k = y+1; k < 30; k++) {
            s[k]=null;
            st[k]=null;
        }
    }
    catch(Exception e)
    {
        e.printStackTrace();
    }
    
    
}
public void listIntoFile(FileWriter fw,BufferedWriter bw)
{
    try{
        if(i!=-1)
        {
            bw.append(s[++j]);
            bw.append("\n");
        }
    }
    catch(Exception e )
    {
        e.printStackTrace();
    }
}    
  
  
    private void mediaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediaActionPerformed
        // TODO add your handling code here:
//        jMenu1.setDropTarget(null);
    }//GEN-LAST:event_mediaActionPerformed

    private void openfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openfileActionPerformed
        // TODO add your handling code here:
        fc=new JFileChooser();
         fc.setDialogTitle("Select song to open"); 
           FileNameExtensionFilter filter = new FileNameExtensionFilter("Media Files", "wav","wmv","wma",
                   "mp3" ,"aac","mkv" ,"mp4", "vob" ,"mpeg", "avi", "amr", "flv", "jpg","png"
                   ,"psd","tga","thm","tif","gif","ai","eps","ps");
           fc.setFileFilter(filter);
           
           if(fc.showOpenDialog(null)==JFileChooser.APPROVE_OPTION)
           {
              new Thread(new Runnable() {

                    @Override
                    public void run() {
                        st[++i]=fc.getSelectedFile().getName().toString();
                        s[i]=fc.getSelectedFile().getPath().toString();
                        jll.setListData(st);
                        jl.setListData(s);
                      jll.setSelectedValue(fc.getSelectedFile().getName().toString(),true);
                     // jl.setSelectedValue(fc.getSelectedFile().getPath().toString(), true);
                        //player.playMedia(fc.getSelectedFile().toString());
                    }
                }).start();
              try{
                  Thread.sleep(800);
              }catch(InterruptedException e){
                  
              }
           }  
        
    }//GEN-LAST:event_openfileActionPerformed

    private void playbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playbuttonActionPerformed
    
        player.play();
    }//GEN-LAST:event_playbuttonActionPerformed

    private void pauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseActionPerformed
          
        player.pause();
     
    }//GEN-LAST:event_pauseActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
       
        player.stop();
    }//GEN-LAST:event_stopActionPerformed

    private void muteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_muteActionPerformed

        player.mute();
        switch(bus)
        {
            case 1: 
            {
                 mute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/bluemute.png")));
                 bus=0;
                 break;
            }
            case 0:
            {
                 mute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/volumeblue.png")));
                 bus=1;
                 break;
            }
        }
    }//GEN-LAST:event_muteActionPerformed

    private void volStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_volStateChanged
        // TODO add your handling code here:
        int n=vol.getValue();
        player.setVolume(n);
    }//GEN-LAST:event_volStateChanged

    private void exititemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exititemActionPerformed
        // TODO add your handling code here:
        player.release();
        System.exit(0);
    }//GEN-LAST:event_exititemActionPerformed

    private void sliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderMouseDragged
        // TODO add your handling code here:
        sliderMouseReleased(evt);
    }//GEN-LAST:event_sliderMouseDragged

    private void sliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderMouseReleased
        // TODO add your handling code here:
       long n=slider.getValue();
                
                player.setTime(n+1000);
                slider.setValue((int)player.getTime());
    }//GEN-LAST:event_sliderMouseReleased

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        // TODO add your handling code here:
        if(jl.isSelectionEmpty())
            {
                jl.setSelectedIndex(0);
                jll.setSelectedIndex(0);
            }
            else if(!jll.isSelectionEmpty())
            {
                  if(jll.getSelectedIndex()==i)
                  {
                      jll.setSelectedIndex(0);
                      jl.setSelectedIndex(0); 
                  }
                  else 
                  {
                      int p=jll.getSelectedIndex();
                      p++;
                       jll.setSelectedIndex(p);
                       jl.setSelectedIndex(p);
                      
                  }
            }
    }//GEN-LAST:event_nextActionPerformed

    private void previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousActionPerformed
        // TODO add your handling code here:
            
         if(jl.isSelectionEmpty())
            {
                jl.setSelectedIndex(i);
                jll.setSelectedIndex(i);
            }
            else if(!jll.isSelectionEmpty())
           {
             if(jll.getSelectedIndex()==0)
              {
                      jll.setSelectedIndex(i);
                      jl.setSelectedIndex(i);
              }
             else 
             {
                int p=jll.getSelectedIndex();
                p--;
                jll.setSelectedIndex(p);
                jl.setSelectedIndex(p);                
             }
           }      
    }//GEN-LAST:event_previousActionPerformed

    private void openplaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openplaylistActionPerformed
        // TODO add your handling code here:
            
           for (int k = 0; k <=i; k++)
           {
               s[k]=null;
               st[k]=null;
           }
           i=-1;
           JFileChooser jcc=new JFileChooser("C:\\Playlists\\");
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Playlists", "txt");
           jcc.setFileFilter(filter);
                  if(jcc.showOpenDialog(null)==JFileChooser.APPROVE_OPTION)
                  {
                      FileReader fr;
                      BufferedReader br;
                      try {
                           fr=new FileReader(jcc.getSelectedFile().getPath().toString());
                           br=new BufferedReader(fr);
                           String con="";
                           while((con=br.readLine())!=null)
                           {
                               s[++i]=con;
                               st[i]="";
                               int g,h;
        
                                for ( g = s[i].length()-1; g >0 ; g--) 
                                { 
                                 if(((int)s[i].charAt(g))==92)  
                                 {
                                    g++;
                                    break;
                                 }
                                 }
                                for (h = g; h < s[i].length(); h++) 
                                    st[i]+=s[i].charAt(h);
                           } 
                            
                      }
                      catch(Exception e){
                          e.printStackTrace();
                      }
           jl.setListData(s);
           jll.setListData(st);
                  }
    }//GEN-LAST:event_openplaylistActionPerformed

    private void newListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newListActionPerformed
        // TODO add your handling code here:
      FileWriter fw = null;

          try {
                j=-1;
                for (int k = 0; k <=i; k++)
                {
                   s[k]=null;
                   st[k]=null;
                }
                i=-1;
                String ss1=JOptionPane.showInputDialog("Enter name of the playlist");
                if(ss1!=null)
                {
                fw = new FileWriter("C:\\Playlists\\"+ss1+".txt");
                BufferedWriter bw=new BufferedWriter(fw);

                do{
                 JFileChooser jf=new JFileChooser();
                 jf.setDialogTitle("Add songs to the new playlist");
                 FileNameExtensionFilter filter = new FileNameExtensionFilter(
                  "Media Files", "wav","wmv","wma", "mp3" ,"aac","mkv" ,"mp4", "vob" ,"mpeg", "avi", "amr", "flv",
                         "jpg","png","psd","tga","thm","tif","gif","ai","eps","ps");
                 jf.setFileFilter(filter);
                 
                 if(jf.showOpenDialog(null)==JFileChooser.APPROVE_OPTION)
                 {
                     s[++i]=jf.getSelectedFile().getPath().toString();
                     st[i]="";
                     int g,h;
                     for ( g = s[i].length()-1; g >0 ; g--) 
                     { 
                        if(((int)s[i].charAt(g))==92)  
                        {
                           g++;
                           break;
                        }
                     }
                    for (h = g; h < s[i].length(); h++) 
                      st[i]+=s[i].charAt(h);
                   
                     jl.setListData(s);
                     jll.setListData(st);
                     listIntoFile(fw,bw);
                 
                 }
                }while(JOptionPane.showConfirmDialog(null, "Want to add more media files")==0);
                bw.close();
                fw.close();
              } 
            }
            catch (IOException ex) {
                ex.printStackTrace();
            } 
      
    }//GEN-LAST:event_newListActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
          
        JFileChooser jc1=new JFileChooser("C:\\Playlists\\"); 
           FileNameExtensionFilter filter = new FileNameExtensionFilter("Playlists", "txt");
           jc1.setFileFilter(filter);
           
         
           
           if(jc1.showOpenDialog(null)==JFileChooser.APPROVE_OPTION)
           {
               
                 
           for (int k = 0; k <=i; k++) 
           {
               s[k]=null;
               st[k]=null;
           }
           i=-1;
               FileReader fr;
               BufferedReader br;
               try {
                 fr=new FileReader(jc1.getSelectedFile().getPath().toString());
                 br=new BufferedReader(fr);
                 String con="";
                 while((con=br.readLine())!=null)
                 {
                     s[++i]=con;
                     st[i]="";
                     int g,h;
                     for ( g = s[i].length()-1; g >0 ; g--) 
                     { 
                         if(((int)s[i].charAt(g))==92)  
                         {
                            g++;
                            break;
                         }
                     }
                    for (h = g; h < s[i].length(); h++) 
                       st[i]+=s[i].charAt(h);
                 } 
                 j=i;
                 jl.setListData(s);
                 jll.setListData(st); 
                            
                String [] possibleValues = { "Add in list", "Delete from list" };
                x=JOptionPane.showInputDialog(null,"Choose one", "Input",JOptionPane.INFORMATION_MESSAGE, null,
                            possibleValues, possibleValues[0]);
                
          if(x!=null)
          {
            if(x.equals("Add in list")) 
                 {  
                     do {
                        updateFile(jc1.getSelectedFile().getPath().toString());
                        jl.setListData(s);
                        jll.setListData(st); 
                        } while(JOptionPane.showConfirmDialog(null,"Do you want to add more media?")==0);
                 }
             if(x.equals("Delete from list"))
             {
              do{     
                  Object nm=JOptionPane.showInputDialog(null,"Select the song to be deleted", "Input"
                          ,JOptionPane.INFORMATION_MESSAGE, null,  st, st[0]);    
                 if(nm!=null)
                 {
                   
                 b=false;
                 
                      
                  jll.setSelectedValue(nm,true);
                 jl.setSelectedIndex(jll.getSelectedIndex());
                  
                  
                  deleteFile(jl.getSelectedIndex(),jc1.getSelectedFile().getPath().toString());
                  jl.setListData(s);
                  jll.setListData(st);
                  y=-1;
                 }
                
              }while(JOptionPane.showConfirmDialog(null, "Do you want to delete more media files from playlists?")==0);
            }
           b=true;
          }  
               }
               catch (Exception ex) 
                  {  ex.printStackTrace();  }
            }
     
    }//GEN-LAST:event_updateActionPerformed

    private void forwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardActionPerformed
        // TODO add your handling code here:
         long n=slider.getValue();
                n=n+10000;
                player.setTime(n);
                slider.setValue((int)player.getTime());
    }//GEN-LAST:event_forwardActionPerformed

    private void rewindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rewindActionPerformed
        // TODO add your handling code here:long n=slider.getValue();
               long n=slider.getValue();        
                n=n-10000;
                player.setTime(n);
                slider.setValue((int)player.getTime());
    }//GEN-LAST:event_rewindActionPerformed

    private void forwarditemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwarditemActionPerformed
        // TODO add your handling code here:
        forwardActionPerformed(evt);
    }//GEN-LAST:event_forwarditemActionPerformed

    private void playitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playitemActionPerformed
        // TODO add your handling code here:
        playbuttonActionPerformed(evt);
    }//GEN-LAST:event_playitemActionPerformed

    private void pauseitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseitemActionPerformed
        // TODO add your handling code here:
        pauseActionPerformed(evt);
    }//GEN-LAST:event_pauseitemActionPerformed

    private void stopitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopitemActionPerformed
        // TODO add your handling code here:
        stopActionPerformed(evt);
    }//GEN-LAST:event_stopitemActionPerformed

    private void backwarditemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backwarditemActionPerformed
        // TODO add your handling code here:
        rewindActionPerformed(evt);
    }//GEN-LAST:event_backwarditemActionPerformed

    private void nextitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextitemActionPerformed
        // TODO add your handling code here:
        nextActionPerformed(evt);
    }//GEN-LAST:event_nextitemActionPerformed

    private void previousitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousitemActionPerformed
        // TODO add your handling code here:
        previousActionPerformed(evt);
    }//GEN-LAST:event_previousitemActionPerformed

    private void togglemuteitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_togglemuteitemActionPerformed
        // TODO add your handling code here:
        muteActionPerformed(evt);
    }//GEN-LAST:event_togglemuteitemActionPerformed

    private void helpitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpitemActionPerformed
       
        String str;
       FileReader fr=null;
        JFrame helping=new JFrame("HELP");
            JTextArea content=new JTextArea();
            helping.setSize(500,500);
//            
            helping.setVisible(true);
            helping.setLayout(new BorderLayout());
            helping.add(content);
        try {
             fr=new FileReader("Help.txt");
            BufferedReader br=new BufferedReader(fr);
            try {
                while((str=br.readLine())!=null)
                {
                    content.append(str);
                    content.append("\n");
                }
            } catch (IOException ex) {
                Logger.getLogger(project5.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(project5.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        { 
            try {
                fr.close();
            } catch (IOException ex) {
                Logger.getLogger(project5.class.getName()).log(Level.SEVERE, null, ex);
            }
       
        }

            
    }//GEN-LAST:event_helpitemActionPerformed

    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
        // TODO add your handling code here:
        String str;
        FileReader fr=null;
        JFrame helping=new JFrame("ABOUT");
            JTextArea content=new JTextArea();
            helping.setSize(400,400);
          
            helping.setVisible(true);
            helping.setLayout(new BorderLayout());
            helping.add(content);
        try {
             fr=new FileReader("about.txt");
            BufferedReader br=new BufferedReader(fr);
            try {
                while((str=br.readLine())!=null)
                {
                    content.append(str);
                    content.append("\n");
                }
            } catch (IOException ex) {
                Logger.getLogger(project5.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(project5.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        { 
            try {
                fr.close();
            } catch (IOException ex) {
                Logger.getLogger(project5.class.getName()).log(Level.SEVERE, null, ex);
            }
           
        }

    }//GEN-LAST:event_aboutActionPerformed

    public void moveSlider() {
       
             slider.setMinimum(0);     
             slider.setMaximum(length);
     
       new Thread(new Runnable() {
           int val=0;
            @Override
            public void run() {
                while(true){
                try{
                        Thread.sleep(1000);
                        slider.setValue((int)player.getTime());
                    }catch(InterruptedException e){  
                    }
                }
                
            }
        }).start();
    }
    
    public void uptime()
    {
        new Thread(new Runnable() {
 
         long sec=0,min=0;
            @Override
            public void run() {
               
                 while(true)
                  {
                  try{
                   long l=(player.getTime()/1000);
                   min=l/60;
                   sec=l%60;
                   if(sec<10)
                   {
                    timelabel.setText(String.valueOf(min+":0"+sec));   
                    
                   }
                   else
                   {
                   timelabel.setText(String.valueOf(min+":"+sec));
                  
                   }
                   Thread.sleep(900);
                   }
                catch(Exception e1)
                {
                    System.out.println(e1.getMessage());
                }
                  }
                
            }
        }).start();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                
         NativeLibrary.addSearchPath(RuntimeUtil.getLibVlcLibraryName(), "C:\\Program Files\\VideoLAN\\VLC");
      Native.loadLibrary(RuntimeUtil.getLibVlcLibraryName(), LibVlc.class);
      new project5().setVisible(true);       
               
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem about;
    private javax.swing.JMenuItem backwarditem;
    private javax.swing.JPanel buttons;
    private javax.swing.JMenuItem exititem;
    private javax.swing.JButton forward;
    private javax.swing.JMenuItem forwarditem;
    private javax.swing.JMenu help;
    private javax.swing.JMenuItem helpitem;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList jll;
    private javax.swing.JMenu media;
    private javax.swing.JButton mute;
    private javax.swing.JMenuItem newList;
    private javax.swing.JButton next;
    private javax.swing.JMenuItem nextitem;
    private javax.swing.JMenuItem openfile;
    private javax.swing.JMenuItem openplaylist;
    private javax.swing.JButton pause;
    private javax.swing.JMenuItem pauseitem;
    private javax.swing.JMenu playback;
    private javax.swing.JButton playbutton;
    private javax.swing.JPanel playerscreen;
    private javax.swing.JMenuItem playitem;
    private javax.swing.JMenu playlist;
    private javax.swing.JButton previous;
    private javax.swing.JMenuItem previousitem;
    private javax.swing.JButton rewind;
    private javax.swing.JSlider slider;
    private javax.swing.JButton stop;
    private javax.swing.JMenuItem stopitem;
    private javax.swing.JLabel timelabel;
    private javax.swing.JMenuItem togglemuteitem;
    private javax.swing.JMenuItem update;
    private javax.swing.JSlider vol;
    // End of variables declaration//GEN-END:variables
}
